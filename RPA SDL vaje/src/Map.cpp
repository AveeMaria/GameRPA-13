#include "Map.hpp"
#include "TextureManager.hpp"

//12x16 tileov po 50x50 pixlov
/*
int lvl1[12][16] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,1,1,2,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};*/
/*
int lvl1[15][20] = {
	{9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}
};*/

int lvl1[24][32] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2},
	{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,2,0,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,0,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0}
};

int lvl2[24][32] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,2},
	{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,0,0,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,0,2,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,2,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0}
};

int lvl3[24][32] = {
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,2},
	{0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,2,1,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,1,2,2,2,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,1,2,2,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,2,1,0,0,0,0,0,0,2,2,2,2},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,1,0,0,0,0,0,0,0,2,0,0,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,2,2,2,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,2,2,0,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,0},
	{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0}
};

int Map::MaxIcebergs(float IcebergPercentage) {
	int water = 0;
	for (int i = 0; i < 24; ++i) {
		for (int j = 0; j < 32; ++j) {
			if (map[i][j] == 0) {
				water++;
			}
		}
	}
	//std::cout<<"water: "<<water<<"\n";
	return (int)(water * IcebergPercentage);
}

Map::Map() 
{
	sand = TextureManager::LoadTexture("assets/antarctic_sand.png");
	grass = TextureManager::LoadTexture("assets/antarctic_grass.png");
	water = TextureManager::LoadTexture("assets/antarctic_water.png");
	corrupted = TextureManager::LoadTexture("assets/corrupted.png");
	LoadMap(lvl1);

	src.x = src.y = 0;
	dest.x = dest.y = 0;

	src.w = dest.w = tilesize;
	src.h = dest.h = tilesize;
}

Map::~Map() 
{
}



//direction based land collision
bool Map::LandCollision(SDL_Rect entity, Direction direction) {
	SDL_Rect trenutno;
	bool obala = false;

	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < n; ++j) {
			trenutno = {
				tilesize * j,
				tilesize * i,
				tilesize,
				tilesize
			};
			//prevermo direction da ni #frke
			switch (direction) {
			case Direction::Up:
				if (SDL_HasIntersection(&entity, &trenutno) && map[i][j] != 0) {
					return true;
				}
				break;
			case Direction::Down:
				if (SDL_HasIntersection(&entity, &trenutno) && map[i][j] != 0) {
					return true;
				}
				break;
			case Direction::Left:
				if (SDL_HasIntersection(&entity, &trenutno) && map[i][j] != 0) {
					return true;
				}
				break;
			case Direction::Right:
				if (SDL_HasIntersection(&entity, &trenutno) && map[i][j] != 0) {
					return true;
				}
				break;
			}
		}
	}

	return obala;
}

//preveri ce se nas entity dotika obale
bool Map::LandCollision(SDL_Rect entity) {
	SDL_Rect trenutno;bool obala = false;

	//int map[m][n], m=24, n=32
	for (int i = 0; i < m; ++i) {
		for (int j = 0; j < n; ++j) {
			trenutno = {
				tilesize * j,
				tilesize * i,
				tilesize,
				tilesize
			};

			if (SDL_HasIntersection(&entity, &trenutno) && map[i][j] != 0) {
				return true;
			}
		}
	}

	//returna false z ekstra koraki
	return obala;
}

void Map::LoadMap(int arr[24][32])
{
	for (int row = 0; row < 24; ++row) {
		for (int column = 0; column < 32; ++column) {
			map[row][column] = arr[row][column];
		}
	}
}

void Map::LoadMapLVLselect(int n)
{
		switch (n) {
		case 1:
			//antartic sea level
			sand = TextureManager::LoadTexture("assets/antarctic_sand.png");
			grass = TextureManager::LoadTexture("assets/antarctic_grass.png");
			water = TextureManager::LoadTexture("assets/antarctic_water.png");
			currLvl = 1;
			LoadMap(lvl1);
			break;
		case 2:
			//northern sea level
			sand = TextureManager::LoadTexture("assets/northern_sand.png");
			grass = TextureManager::LoadTexture("assets/northern_grass.png");
			water = TextureManager::LoadTexture("assets/northern_water.png");
			currLvl = 2;
			LoadMap(lvl2);
			break;
		case 3:
			//south china sea level
			sand = TextureManager::LoadTexture("assets/sand.png");
			grass = TextureManager::LoadTexture("assets/grass.png");
			water = TextureManager::LoadTexture("assets/water.png");
			currLvl = 3;
			LoadMap(lvl3);
			
			break;
		default:
			break;
		};
	/*
	for (int row = 0; row < 24; ++row) {
		for (int column = 0; column < 32; ++column) {
			map[row][column] = arr[row][column];
		}
	}*/
}

void Map::DrawMap()
{
	int type = 0;
	for (int row = 0; row < 24; ++row) {
		for (int column = 0; column < 32; ++column) {
			type = map[row][column];
			dest.x = column * tilesize;
			dest.y = row * tilesize;
			switch (type){
			case 0:
				TextureManager::Draw(water, src, dest);
				break;
			case 1:
				TextureManager::Draw(sand, src, dest);
				break;
			case 2:
				TextureManager::Draw(grass, src, dest);
				break;
			default:
				TextureManager::Draw(corrupted, src, dest);
				break;
			}
			//map[row][column] = arr[row][column];
		}
	}
}

//to je za 15x20 tilesov
/*
void Map::LoadMap(int arr[15][20]) 
{
	for (int row = 0; row < 12; ++row) {
		for (int column = 0; column < 16; ++column) {
			map[row][column] = arr[row][column];
		}
	}
}

void Map::DrawMap() 
{
	int type = 0;
	for (int row = 0; row < 15; ++row) {
		for (int column = 0; column < 20; ++column) {
			type = map[row][column];
			dest.x = column * tilesize;
			dest.y = row * tilesize;
			switch (type)
			{
			case 0:
				TextureManager::Draw(water, src, dest);
				break;
			case 1:
				TextureManager::Draw(sand, src, dest);
				break;
			case 2:
				TextureManager::Draw(grass, src, dest);
				break;
			default:
				TextureManager::Draw(corrupted, src, dest);
				break;
			}
			//map[row][column] = arr[row][column];
		}
	}
}*/